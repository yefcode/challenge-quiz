{"version":3,"sources":["utils/utils.js","components/OverallProgressBar/OverallProgressBar.js","components/Question/Answers/Answers.js","components/Question/Question.js","components/ScoreBar/ScoreBar.js","components/QuizComplete/QuizComplete.js","App.js","serviceWorker.js","index.js"],"names":["getPercentageValue","value","arguments","length","undefined","total","Math","round","OverallProgressBar","_ref","currentQuestionIndex","totalQuestions","currentProgress","react_default","a","createElement","className","style","width","concat","transition","Answers","question","answerSelected","setAnswerSelected","_useState","useState","_useState2","Object","slicedToArray","answers","setAnswers","answerContext","useContext","QuestionContext","useEffect","questionAnswers","type","incorrect_answers","randomIndex","floor","random","map","answer","splice","correct_answer","disableAnswerStyle","correctAnswer","index","key","disabled","onClick","updateScoreIndex","updateScore","selectedAnswer","decodeURIComponent","QuestionHeader","_ref2","headerContext","difficultyMediumStyle","difficulty","difficultyHardStyle","Fragment","category","ResultMessage","_ref3","updateAnswerSelected","resultMessageContext","updateCurrentQuestionIndex","Question","Question_QuestionHeader","Question_Answers_Answers","Question_ResultMessage","ScoreBar","score","currentScoreIndex","lowestScore","currentScore","maxScore","getMaxScore","QuizComplete","restartQuiz","createContext","App","setQuestion","_useState3","_useState4","setCurrentQuestionIndex","_useState5","_useState6","setScore","_useState7","_useState8","setCurrentScoreIndex","questions","questionContext","components_OverallProgressBar_OverallProgressBar","Provider","components_Question_Question","components_QuizComplete_QuizComplete","components_ScoreBar_ScoreBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b70ed52b.chunk.js","sourcesContent":["const getPercentageValue = (value = 0, total = 0) => {\n  if (total) {\n    return Math.round(((value / total) * 100))\n  } else {\n    return 0\n  }\n}\n\nconst getMaxScore = (totalQuestions, currentScoreIndex, score) => {\n  return getPercentageValue((totalQuestions - currentScoreIndex + score), totalQuestions)\n}\n\nexport { getPercentageValue, getMaxScore }\n","import React from 'react'\nimport './OverallProgressBar.css'\nimport { getPercentageValue } from '../../utils/utils.js'\n\nconst OverallProgressBar = ({ currentQuestionIndex, totalQuestions }) => {\n  const currentProgress = currentQuestionIndex <= totalQuestions\n    ? getPercentageValue(currentQuestionIndex, totalQuestions) : 100\n  return (\n    <div className='overall-progress'\n      style={{ width: `${currentProgress}%`, transition: 'width .6s ease' }}\n    />\n  )\n}\n\nexport default OverallProgressBar\n","import React, { useState, useEffect, useContext } from 'react'\nimport './Answers.css'\nimport { QuestionContext } from '../../../App'\n\nconst Answers = ({ question, answerSelected, setAnswerSelected }) => {\n  const [answers, setAnswers] = useState([])\n  const answerContext = useContext(QuestionContext)\n\n  useEffect(() => {\n    let questionAnswers = []\n    if (question.type === 'boolean') {\n      questionAnswers = ['True', 'False']\n    } else {\n      if (question.incorrect_answers) {\n        const randomIndex =\n        Math.floor(Math.random() * (question.incorrect_answers).length + 1)\n        questionAnswers = question.incorrect_answers.map(answer => answer)\n        questionAnswers.splice(randomIndex, 0, question.correct_answer)\n      }\n    }\n    setAnswers(questionAnswers)\n  }, [question.correct_answer, question.incorrect_answers, question.type])\n\n  const selectedAnswer = (answer) => {\n    setAnswerSelected(answer)\n    answerContext.updateScoreIndex()\n    if (answer === question.correct_answer) {\n      answerContext.updateScore()\n    }\n  }\n\n  const disableAnswerStyle = answerSelected ? 'disable-answer' : ''\n  const correctAnswer = (answer) => {\n    return (answerSelected && (answer === question.correct_answer))\n      ? 'correct-answer' : answerSelected === answer\n        ? 'selected-answer' : ''\n  }\n\n  return (\n    <div className='answers'>\n      {answers.map((answer, index) => (\n        <button\n          className={`answer ${disableAnswerStyle} ${correctAnswer(answer)}`}\n          key={index}\n          disabled={answerSelected !== ''}\n          onClick={() => selectedAnswer(answer)}>\n          {decodeURIComponent(answer)}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nexport default Answers\n","import React, { useState, useContext } from 'react'\nimport Answers from './Answers/Answers'\nimport './Question.css'\nimport { QuestionContext } from '../../App'\n\nconst Question = ({ question }) => {\n  const [answerSelected, setAnswerSelected] = useState('')\n\n  return (\n    <div className='question-container'>\n      <QuestionHeader\n        question={question} />\n      <p className='question'>{decodeURIComponent(question.question)}</p>\n      <Answers\n        question={question}\n        answerSelected={answerSelected}\n        setAnswerSelected={setAnswerSelected} />\n      {\n        answerSelected !== ''\n          ? <ResultMessage\n            answerSelected={answerSelected}\n            correctAnswer={question.correct_answer}\n            updateAnswerSelected={() => setAnswerSelected('')} /> : null\n      }\n    </div>\n  )\n}\n\nconst QuestionHeader = ({ question }) => {\n  const headerContext = useContext(QuestionContext)\n  const difficultyMediumStyle = question.difficulty === 'easy' ? 'gray' : 'black'\n  const difficultyHardStyle = question.difficulty === 'hard' ? 'black' : 'gray'\n  return (\n    <>\n      <h2>Question {headerContext.currentQuestionIndex} of {headerContext.totalQuestions}</h2>\n      <small className='category'>{decodeURIComponent(question.category)}</small>\n      <div>\n        <span className='difficulty black'>★</span>\n        <span className={`difficulty ${difficultyMediumStyle}`}>★</span>\n        <span className={`difficulty ${difficultyHardStyle}`}>★</span>\n      </div>\n    </>\n  )\n}\n\nconst ResultMessage = ({ answerSelected, correctAnswer, updateAnswerSelected }) => {\n  const resultMessageContext = useContext(QuestionContext)\n  const nextQuestion = () => {\n    resultMessageContext.updateCurrentQuestionIndex()\n    updateAnswerSelected()\n  }\n  return (\n    <div className='text-center'>\n      <div className='correct-sorry'>{answerSelected === correctAnswer ? 'Correct!' : 'Sorry!'}</div>\n      <button className='next-question' onClick={() => nextQuestion()}>Next Question</button>\n    </div>\n  )\n}\n\nexport default Question\n","import React from 'react'\nimport './ScoreBar.css'\nimport { getPercentageValue, getMaxScore } from '../../utils/utils.js'\n\nconst ScoreBar = ({ totalQuestions, score, currentScoreIndex }) => {\n  const lowestScore = getPercentageValue(score, totalQuestions)\n  const currentScore = getPercentageValue(score, currentScoreIndex)\n  const maxScore = getMaxScore(totalQuestions, currentScoreIndex, score)\n\n  return (\n    <div className='score'>\n      <div className='score-container'>\n        <span className='current-score'>Score: {currentScore}%</span>\n        <span className='max-score'>Max Score: {maxScore}%</span>\n      </div>\n      <div className='score-bar'>\n        <div className='max-score-bar'\n          style={{ width: `${maxScore}%`, transition: 'width .6s ease' }} />\n        <div className='current-score-bar'\n          style={{ width: `${currentScore}%`, transition: 'width .6s ease' }} />\n        <div className={currentScoreIndex !== totalQuestions ? 'lowest-score-bar' : ''}\n          style={{ width: `${lowestScore}%`, transition: 'width .6s ease' }} />\n      </div>\n    </div>\n  )\n}\n\nexport default ScoreBar\n","import React from 'react'\nimport './QuizComplete.css'\n\nconst QuizComplete = ({ score, totalQuestions, restartQuiz }) => {\n  return (\n    <div className='text-center'>\n      <h1>Quiz Completed</h1>\n      <h2>Score {Math.floor((score * 100) / totalQuestions)}%</h2>\n      <h2>Score {`${score} / ${totalQuestions}`}</h2>\n      <button className='restart-quiz' onClick={() => restartQuiz()}>Restart Quiz</button>\n    </div>\n  )\n}\n\nexport default QuizComplete\n","import React, { useState, useEffect, createContext } from 'react'\nimport OverallProgressBar from './components/OverallProgressBar/OverallProgressBar'\nimport Question from './components/Question/Question'\nimport ScoreBar from './components/ScoreBar/ScoreBar'\nimport QuizComplete from './components/QuizComplete/QuizComplete'\nimport questions from './questions.json'\nimport './App.css'\n\nconst QuestionContext = createContext()\n\nfunction App () {\n  const [question, setQuestion] = useState({})\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n  const [score, setScore] = useState(0)\n  const [currentScoreIndex, setCurrentScoreIndex] = useState(0)\n  const totalQuestions = questions.length\n\n  useEffect(() => {\n    setQuestion(questions[currentQuestionIndex])\n  }, [currentQuestionIndex])\n\n  const restartQuiz = () => {\n    setCurrentQuestionIndex(0)\n    setScore(0)\n    setCurrentScoreIndex(0)\n    setQuestion(questions[0])\n  }\n\n  const questionContext = {\n    currentQuestionIndex: currentQuestionIndex + 1,\n    totalQuestions: totalQuestions,\n    updateCurrentQuestionIndex: () => setCurrentQuestionIndex(currentQuestionIndex + 1),\n    updateScore: () => setScore(score + 1),\n    updateScoreIndex: () => setCurrentScoreIndex(currentScoreIndex + 1)\n  }\n\n  return (\n    <div className='App'>\n      <OverallProgressBar\n        currentQuestionIndex={currentQuestionIndex + 1}\n        totalQuestions={totalQuestions} />\n      <div className='quiz-container'>\n        { currentQuestionIndex < totalQuestions && (\n          <QuestionContext.Provider value={questionContext}>\n            <Question\n              question={question}\n            />\n          </QuestionContext.Provider>\n        )}\n        {currentQuestionIndex === totalQuestions && (\n          <QuizComplete\n            score={score}\n            totalQuestions={totalQuestions}\n            restartQuiz={restartQuiz} />\n        )}\n        <ScoreBar\n          totalQuestions={totalQuestions}\n          score={score}\n          currentScoreIndex={currentScoreIndex}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\nexport { QuestionContext }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  window.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}