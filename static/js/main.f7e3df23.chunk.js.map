{"version":3,"sources":["utils/utils.js","components/OverallProgressBar/OverallProgressBar.js","components/Question/Question.js","components/ScoreBar/ScoreBar.js","App.js","serviceWorker.js","index.js"],"names":["getPercentageValue","value","arguments","length","undefined","total","Math","round","OverallProgressBar","_ref","currentQuestionIndex","totalQuestions","currentProgress","react_default","a","createElement","className","style","width","concat","transition","Question","question","updateCurrentQuestionIndex","updateScore","updateScoreIndex","_useState","useState","_useState2","Object","slicedToArray","answers","setAnswers","_useState3","_useState4","answerSelected","setAnswerSelected","useEffect","questionAnswers","type","randomIndex","floor","random","incorrect_answers","splice","correct_answer","difficultyMediumStyle","difficulty","difficultyHardStyle","disableAnswerStyle","decodeURIComponent","category","map","answer","index","key","disabled","onClick","selectedAnswer","ScoreBar","score","currentScoreIndex","lowestScore","currentScore","maxScore","getMaxScore","App","setQuestion","setCurrentQuestionIndex","_useState5","_useState6","setScore","_useState7","_useState8","setCurrentScoreIndex","questions","components_OverallProgressBar_OverallProgressBar","components_Question_Question","components_ScoreBar_ScoreBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0oLAAMA,SAAqB,WAA0B,IAAzBC,EAAyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,EAAGG,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,EAC7C,OAAIG,EACKC,KAAKC,MAAQN,EAAQI,EAAS,KAE9B,ICUIG,EAVY,SAAAC,GAA8C,IAA3CC,EAA2CD,EAA3CC,qBAAsBC,EAAqBF,EAArBE,eAC5CC,EAAkBF,GAAwBC,EAC5CX,EAAmBU,EAAsBC,GAAkB,IAC/D,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbC,MAAO,CAAEC,MAAK,GAAAC,OAAKP,EAAL,KAAyBQ,WAAY,qBCuE1CC,SA7EE,SAAAZ,GAAmH,IAAhHC,EAAgHD,EAAhHC,qBAAsBC,EAA0FF,EAA1FE,eAAgBW,EAA0Eb,EAA1Ea,SAAUC,EAAgEd,EAAhEc,2BAA4BC,EAAoCf,EAApCe,YAAaC,EAAuBhB,EAAvBgB,iBAAuBC,EACpGC,mBAAS,IAD2FC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3HK,EAD2HH,EAAA,GAClHI,EADkHJ,EAAA,GAAAK,EAEtFN,mBAAS,IAF6EO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE3HE,EAF2HD,EAAA,GAE3GE,EAF2GF,EAAA,GAIlIG,oBAAU,WACR,IAAIC,EAAkB,GACtB,GAAsB,YAAlBhB,EAASiB,KACXD,EAAkB,CAAC,OAAQ,aACtB,CACL,IAAME,EACNlC,KAAKmC,MAAMnC,KAAKoC,UAAYpB,EAASqB,mBAAqB,IAAIxC,OAAS,IACvEmC,EAAmBhB,EAASqB,mBAAqB,IAC7BxC,QAClBmC,EAAgBM,OAAOJ,EAAa,EAAGlB,EAASuB,gBAGpDb,EAAWM,IACV,CAAChB,EAASuB,eAAgBvB,EAASqB,kBAAmBrB,EAASiB,OAElE,IAaMO,EAAgD,SAAxBxB,EAASyB,WAAwB,OAAS,QAClEC,EAA8C,SAAxB1B,EAASyB,WAAwB,QAAU,OAEjEE,EAAqBd,EAAiB,iBAAmB,GAE/D,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,sBAAcL,EAAd,OAAwCC,GACxCE,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYkC,mBAAmB5B,EAAS6B,WACzDtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,UACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAS,cAAAG,OAAgB2B,IAA/B,UACAjC,EAAAC,EAAAC,cAAA,QAAMC,UAAS,cAAAG,OAAgB6B,IAA/B,WAEFnC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYkC,mBAAmB5B,EAASA,WACrDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZe,EAAQqB,IAAI,SAACC,EAAQC,GAAT,OACXzC,EAAAC,EAAAC,cAAA,UACEC,UAAS,UAAAG,OAAY8B,EAAZ,kBAAA9B,OACPgB,IAAmBkB,EACnB,kBAAsBlB,GAAmBkB,IAAW/B,EAASuB,eAC3D,iBAAmB,GAHd,KAITU,IAAKD,EACLE,SAA6B,KAAnBrB,EACVsB,QAAS,kBArCI,SAACJ,GACtBjB,EAAkBiB,GAClB5B,IACI4B,IAAW/B,EAASuB,gBACtBrB,IAiCqBkC,CAAeL,KAC7BH,mBAAmBG,OAKL,KAAnBlB,EACItB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZmB,IAAmBb,EAASuB,eAAiB,WAAa,UAE7DhC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAChByC,QAAS,kBAxCnBlC,SACAa,EAAkB,MAsCV,kBAIO,QC/CJuB,SAvBE,SAAAlD,GAAkD,IAA/CE,EAA+CF,EAA/CE,eAAgBiD,EAA+BnD,EAA/BmD,MAAOC,EAAwBpD,EAAxBoD,kBACnCC,EAAc9D,EAAmB4D,EAAOjD,GACxCoD,EAAe/D,EAAmB4D,EAAOC,GACzCG,EHCY,SAACrD,EAAgBkD,EAAmBD,GACtD,OAAO5D,EAAoBW,EAAiBkD,EAAoBD,EAAQjD,GGFvDsD,CAAYtD,EAAgBkD,EAAmBD,GAEhE,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,sBAAcgD,EAAd,KACAlD,EAAAC,EAAAC,cAAA,0BAAkBiD,EAAlB,MAEFnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbC,MAAO,CAAEC,MAAK,GAAAC,OAAK6C,EAAL,KAAkB5C,WAAY,oBAC9CP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbC,MAAO,CAAEC,MAAK,GAAAC,OAAK4C,EAAL,KAAsB3C,WAAY,oBAClDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbC,MAAO,CAAEC,MAAK,GAAAC,OAAK2C,EAAL,KAAqB1C,WAAY,qCC8B1C8C,MA5Cf,WAAgB,IAAAxC,EACkBC,mBAAS,IAD3BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACPJ,EADOM,EAAA,GACGuC,EADHvC,EAAA,GAAAK,EAE0CN,mBAAS,GAFnDO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEPvB,EAFOwB,EAAA,GAEekC,EAFflC,EAAA,GAAAmC,EAGY1C,mBAAS,GAHrB2C,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GAGPT,EAHOU,EAAA,GAGAC,EAHAD,EAAA,GAAAE,EAIoC7C,mBAAS,GAJ7C8C,EAAA5C,OAAAC,EAAA,EAAAD,CAAA2C,EAAA,GAIPX,EAJOY,EAAA,GAIYC,EAJZD,EAAA,GAKR9D,EAAiBgE,EAAUxE,OAMjC,OAJAkC,oBAAU,WACR8B,EAAYQ,EAAUjE,KACrB,CAACA,IAGFG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6D,EAAD,CACElE,qBAAsBA,EAAuB,EAC7CC,eAAgBA,IAClBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXN,EAAuBC,GACvBE,EAAAC,EAAAC,cAAC8D,EAAD,CACEnE,qBAAsBA,EAAuB,EAC7CC,eAAgBA,EAChBW,SAAUA,EACVC,2BAA4B,kBAAM6C,EAAwB1D,EAAuB,IACjFc,YAAa,kBAAM+C,EAASX,EAAQ,IACpCnC,iBAAkB,kBAAMiD,EAAqBb,EAAoB,MAGpEnD,IAAyBC,GACxBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,mBAAWT,KAAKmC,MAAe,IAARmB,EAAejD,GAAtC,KACAE,EAAAC,EAAAC,cAAA,sBAAAI,OAAcyC,EAAd,OAAAzC,OAAyBR,KAG7BE,EAAAC,EAAAC,cAAC+D,EAAD,CACEnE,eAAgBA,EAChBiD,MAAOA,EACPC,kBAAmBA,OChCTkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f7e3df23.chunk.js","sourcesContent":["const getPercentageValue = (value = 0, total = 0) => {\n  if (total) {\n    return Math.round(((value / total) * 100))\n  } else {\n    return 0\n  }\n}\n\nconst getMaxScore = (totalQuestions, currentScoreIndex, score) => {\n  return getPercentageValue((totalQuestions - currentScoreIndex + score), totalQuestions)\n}\n\nexport { getPercentageValue, getMaxScore }\n","import React from 'react'\nimport './OverallProgressBar.css'\nimport { getPercentageValue } from '../../utils/utils.js'\n\nconst OverallProgressBar = ({ currentQuestionIndex, totalQuestions }) => {\n  const currentProgress = currentQuestionIndex <= totalQuestions\n    ? getPercentageValue(currentQuestionIndex, totalQuestions) : 100\n  return (\n    <div className='overall-progress'\n      style={{ width: `${currentProgress}%`, transition: 'width .6s ease' }}\n    />\n  )\n}\n\nexport default OverallProgressBar\n","import React, { useState, useEffect } from 'react'\nimport './Question.css'\n\nconst Question = ({ currentQuestionIndex, totalQuestions, question, updateCurrentQuestionIndex, updateScore, updateScoreIndex }) => {\n  const [answers, setAnswers] = useState([])\n  const [answerSelected, setAnswerSelected] = useState('')\n\n  useEffect(() => {\n    let questionAnswers = []\n    if (question.type === 'boolean') {\n      questionAnswers = ['True', 'False']\n    } else {\n      const randomIndex =\n      Math.floor(Math.random() * (question.incorrect_answers || []).length + 1)\n      questionAnswers = (question.incorrect_answers || [])\n      if (questionAnswers.length) {\n        questionAnswers.splice(randomIndex, 0, question.correct_answer)\n      }\n    }\n    setAnswers(questionAnswers)\n  }, [question.correct_answer, question.incorrect_answers, question.type])\n\n  const selectedAnswer = (answer) => {\n    setAnswerSelected(answer)\n    updateScoreIndex()\n    if (answer === question.correct_answer) {\n      updateScore()\n    }\n  }\n\n  const nextQuestion = () => {\n    updateCurrentQuestionIndex()\n    setAnswerSelected('')\n  }\n\n  const difficultyMediumStyle = question.difficulty === 'easy' ? 'gray' : 'black'\n  const difficultyHardStyle = question.difficulty === 'hard' ? 'black' : 'gray'\n\n  const disableAnswerStyle = answerSelected ? 'disable-answer' : ''\n\n  return (\n    <div className='question-container'>\n      <h2>Question {currentQuestionIndex} of {totalQuestions}</h2>\n      <small className='category'>{decodeURIComponent(question.category)}</small>\n      <div>\n        <span className='difficulty black'>★</span>\n        <span className={`difficulty ${difficultyMediumStyle}`}>★</span>\n        <span className={`difficulty ${difficultyHardStyle}`}>★</span>\n      </div>\n      <p className='question'>{decodeURIComponent(question.question)}</p>\n      <div className='answers'>\n        {answers.map((answer, index) => (\n          <button\n            className={`answer ${disableAnswerStyle}\n            ${answerSelected === answer\n            ? 'selected-answer' : ((answerSelected && (answer === question.correct_answer))\n              ? 'correct-answer' : '')} `}\n            key={index}\n            disabled={answerSelected !== ''}\n            onClick={() => selectedAnswer(answer)}>\n            {decodeURIComponent(answer)}\n          </button>\n        ))}\n      </div>\n      {\n        answerSelected !== ''\n          ? <div className='text-center'>\n            <div className='correct-sorry'>\n              {answerSelected === question.correct_answer ? 'Correct!' : 'Sorry!'}\n            </div>\n            <button className='next-question'\n              onClick={() => nextQuestion()}>\n              Next Question\n            </button>\n          </div> : null\n      }\n    </div>\n  )\n}\n\nexport default Question\n","import React from 'react'\nimport './ScoreBar.css'\nimport { getPercentageValue, getMaxScore } from '../../utils/utils.js'\n\nconst ScoreBar = ({ totalQuestions, score, currentScoreIndex }) => {\n  const lowestScore = getPercentageValue(score, totalQuestions)\n  const currentScore = getPercentageValue(score, currentScoreIndex)\n  const maxScore = getMaxScore(totalQuestions, currentScoreIndex, score)\n\n  return (\n    <div className='score'>\n      <div className='score-container'>\n        <span>Score: {currentScore}%</span>\n        <span>Max Score: {maxScore}%</span>\n      </div>\n      <div className='score-bar'>\n        <div className='max-score-bar'\n          style={{ width: `${maxScore}%`, transition: 'width .6s ease' }} />\n        <div className='current-score-bar'\n          style={{ width: `${currentScore}%`, transition: 'width .6s ease' }} />\n        <div className='lowest-score-bar'\n          style={{ width: `${lowestScore}%`, transition: 'width .6s ease' }} />\n      </div>\n    </div>\n  )\n}\n\nexport default ScoreBar\n","import React, { useState, useEffect } from 'react'\nimport OverallProgressBar from './components/OverallProgressBar/OverallProgressBar'\nimport Question from './components/Question/Question'\nimport ScoreBar from './components/ScoreBar/ScoreBar'\nimport questions from './questions.json'\nimport './App.css'\n\nfunction App () {\n  const [question, setQuestion] = useState({})\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n  const [score, setScore] = useState(0)\n  const [currentScoreIndex, setCurrentScoreIndex] = useState(0)\n  const totalQuestions = questions.length\n\n  useEffect(() => {\n    setQuestion(questions[currentQuestionIndex])\n  }, [currentQuestionIndex])\n\n  return (\n    <div className='App'>\n      <OverallProgressBar\n        currentQuestionIndex={currentQuestionIndex + 1}\n        totalQuestions={totalQuestions} />\n      <div className='quiz-container'>\n        { currentQuestionIndex < totalQuestions && (\n          <Question\n            currentQuestionIndex={currentQuestionIndex + 1}\n            totalQuestions={totalQuestions}\n            question={question}\n            updateCurrentQuestionIndex={() => setCurrentQuestionIndex(currentQuestionIndex + 1)}\n            updateScore={() => setScore(score + 1)}\n            updateScoreIndex={() => setCurrentScoreIndex(currentScoreIndex + 1)}\n          />\n        )}\n        {currentQuestionIndex === totalQuestions && (\n          <div className='text-center'>\n            <h1>Quiz Completed</h1>\n            <h2>Score {Math.floor((score * 100) / totalQuestions)}%</h2>\n            <h2>Score {`${score} / ${totalQuestions}`}</h2>\n          </div>\n        )}\n        <ScoreBar\n          totalQuestions={totalQuestions}\n          score={score}\n          currentScoreIndex={currentScoreIndex}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  window.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}